diff --git a/llvm/CMakeLists.txt b/llvm/CMakeLists.txt
index 43181af3bc19..608be9ba0d7d 100644
--- a/llvm/CMakeLists.txt
+++ b/llvm/CMakeLists.txt
@@ -487,6 +487,7 @@ set(LLVM_ALL_TARGETS
   WebAssembly
   X86
   XCore
+  Cpu0
   )
 
 set(LLVM_ALL_EXPERIMENTAL_TARGETS
diff --git a/llvm/cmake/config-ix.cmake b/llvm/cmake/config-ix.cmake
index bf1b110245bb..7891ef0aea92 100644
--- a/llvm/cmake/config-ix.cmake
+++ b/llvm/cmake/config-ix.cmake
@@ -505,6 +505,8 @@ elseif (LLVM_NATIVE_ARCH STREQUAL "m68k")
   set(LLVM_NATIVE_ARCH M68k)
 elseif (LLVM_NATIVE_ARCH MATCHES "loongarch")
   set(LLVM_NATIVE_ARCH LoongArch)
+elseif (LLVM_NATIVE_ARCH MATCHES "cpu0")
+  set(LLVM_NATIVE_ARCH Cpu0)
 else ()
   message(FATAL_ERROR "Unknown architecture ${LLVM_NATIVE_ARCH}")
 endif ()
diff --git a/llvm/include/llvm/BinaryFormat/ELF.h b/llvm/include/llvm/BinaryFormat/ELF.h
index 56b5d4e399c6..f6c7620dc516 100644
--- a/llvm/include/llvm/BinaryFormat/ELF.h
+++ b/llvm/include/llvm/BinaryFormat/ELF.h
@@ -320,6 +320,7 @@ enum {
   EM_VE = 251,            // NEC SX-Aurora VE
   EM_CSKY = 252,          // C-SKY 32-bit processor
   EM_LOONGARCH = 258,     // LoongArch
+  EM_CPU0 = 999           // CPU0
 };
 
 // Object file classes.
@@ -975,6 +976,19 @@ enum {
 #include "ELFRelocs/CSKY.def"
 };
 
+// Cpu0 Specific e_flags
+enum {
+  EF_CPU0_NOREORDER = 0x00000001, // Don't reorder instructions
+  EF_CPU0_PIC       = 0x00000002, // Position independent code
+  EF_CPU0_ARCH_32   = 0x50000000, // CPU032 instruction set per linux not elf.h
+  EF_CPU0_ARCH      = 0xf0000000  // Mask for applying EF_CPU0_ARCH_ variant
+};
+
+// ELF Relocation types for Mips
+enum {
+#include "ELFRelocs/Cpu0.def"
+};
+
 // LoongArch Specific e_flags
 enum : unsigned {
   // Definitions from LoongArch ELF psABI v2.01.
diff --git a/llvm/include/llvm/Object/ELFObjectFile.h b/llvm/include/llvm/Object/ELFObjectFile.h
index 1d457be93741..0226e646229e 100644
--- a/llvm/include/llvm/Object/ELFObjectFile.h
+++ b/llvm/include/llvm/Object/ELFObjectFile.h
@@ -1264,6 +1264,8 @@ StringRef ELFObjectFile<ELFT>::getFileFormatName() const {
       return "elf32-loongarch";
     case ELF::EM_XTENSA:
       return "elf32-xtensa";
+    case ELF::EM_CPU0:        // 32bit ELF format name for CPU0
+      return "ELF32-cpu0";
     default:
       return "elf32-unknown";
     }
@@ -1396,6 +1398,8 @@ template <class ELFT> Triple::ArchType ELFObjectFile<ELFT>::getArch() const {
 
   case ELF::EM_XTENSA:
     return Triple::xtensa;
+  case ELF::EM_CPU0:        // get arch Triple for CPU0
+    return Triple::cpu0;
 
   default:
     return Triple::UnknownArch;
diff --git a/llvm/include/llvm/TargetParser/Triple.h b/llvm/include/llvm/TargetParser/Triple.h
index 7da30e6cf96f..309ca0df94d2 100644
--- a/llvm/include/llvm/TargetParser/Triple.h
+++ b/llvm/include/llvm/TargetParser/Triple.h
@@ -65,6 +65,7 @@ public:
     mipsel,         // MIPSEL: mipsel, mipsallegrexe, mipsr6el
     mips64,         // MIPS64: mips64, mips64r6, mipsn32, mipsn32r6
     mips64el,       // MIPS64EL: mips64el, mips64r6el, mipsn32el, mipsn32r6el
+    cpu0,           // For Tutorial Backend Cpu0
     msp430,         // MSP430: msp430
     ppc,            // PPC: powerpc
     ppcle,          // PPCLE: powerpc (little endian)
diff --git a/llvm/lib/Object/ELF.cpp b/llvm/lib/Object/ELF.cpp
index 0ac4e7a57759..4b2c046de197 100644
--- a/llvm/lib/Object/ELF.cpp
+++ b/llvm/lib/Object/ELF.cpp
@@ -181,6 +181,13 @@ StringRef llvm::object::getELFRelocationTypeName(uint32_t Machine,
       break;
     }
     break;
+  case ELF::EM_CPU0:
+    switch (Type) {
+#include "llvm/BinaryFormat/ELFRelocs/Cpu0.def"
+    default:
+      break;
+    }
+    break;
   default:
     break;
   }
diff --git a/llvm/lib/TargetParser/Triple.cpp b/llvm/lib/TargetParser/Triple.cpp
index 2c5aee3dfb2f..4ce99ec13e9d 100644
--- a/llvm/lib/TargetParser/Triple.cpp
+++ b/llvm/lib/TargetParser/Triple.cpp
@@ -70,6 +70,7 @@ StringRef Triple::getArchTypeName(ArchType Kind) {
   case sparcel:        return "sparcel";
   case sparcv9:        return "sparcv9";
   case spir64:         return "spir64";
+  case cpu0:           return "cpu0"; // Arch type name for CPU0
   case spir:           return "spir";
   case spirv:          return "spirv";
   case spirv32:        return "spirv32";
@@ -164,7 +165,7 @@ StringRef Triple::getArchTypePrefix(ArchType Kind) {
   case sparc:       return "sparc";
 
   case systemz:     return "s390";
-
+  case cpu0:        return "cpu0"; // Arch type prefix for CPU0
   case x86:
   case x86_64:      return "x86";
 
@@ -427,6 +428,7 @@ Triple::ArchType Triple::getArchTypeForLLVMName(StringRef Name) {
     .Case("renderscript64", renderscript64)
     .Case("ve", ve)
     .Case("csky", csky)
+    .Case("cpu0", cpu0)         // Arch type for LLVM name for CPU0
     .Case("loongarch32", loongarch32)
     .Case("loongarch64", loongarch64)
     .Case("dxil", dxil)
@@ -573,6 +575,7 @@ static Triple::ArchType parseArch(StringRef ArchName) {
           .Case("wasm32", Triple::wasm32)
           .Case("wasm64", Triple::wasm64)
           .Case("csky", Triple::csky)
+          .Case("cpu0", Triple::cpu0) // string to triple for CPU0
           .Case("loongarch32", Triple::loongarch32)
           .Case("loongarch64", Triple::loongarch64)
           .Cases("dxil", "dxilv1.0", "dxilv1.1", "dxilv1.2", "dxilv1.3",
@@ -878,6 +881,7 @@ static Triple::ObjectFormatType getDefaultFormat(const Triple &T) {
   case Triple::hexagon:
   case Triple::hsail64:
   case Triple::hsail:
+  case Triple::cpu0:        // Default format to CPU0 is ELF
   case Triple::kalimba:
   case Triple::lanai:
   case Triple::le32:
@@ -1520,6 +1524,7 @@ unsigned Triple::getArchPointerBitWidth(llvm::Triple::ArchType Arch) {
   case llvm::Triple::thumbeb:
   case llvm::Triple::wasm32:
   case llvm::Triple::x86:
+  case llvm::Triple::cpu0:         // CPU0's pointer width is 32 bits.
   case llvm::Triple::xcore:
   case llvm::Triple::xtensa:
     return 32;
@@ -1603,6 +1608,7 @@ Triple Triple::get32BitArchVariant() const {
   case Triple::riscv32:
   case Triple::shave:
   case Triple::sparc:
+  case Triple::cpu0:        // CPU0 is 32-bit.
   case Triple::sparcel:
   case Triple::spir:
   case Triple::spirv32:
@@ -1660,6 +1666,7 @@ Triple Triple::get64BitArchVariant() const {
   case Triple::m68k:
   case Triple::msp430:
   case Triple::r600:
+  case Triple::cpu0:  // cpu0 has not 64-bit arch.
   case Triple::shave:
   case Triple::sparcel:
   case Triple::tce:
@@ -1769,6 +1776,7 @@ Triple Triple::getBigEndianArchVariant() const {
   case Triple::ve:
   case Triple::csky:
   case Triple::xtensa:
+  case Triple::cpu0:    // CPU0 is not big endian.
 
   // ARM is intentionally unsupported here, changing the architecture would
   // drop any arch suffixes.
@@ -1880,6 +1888,7 @@ bool Triple::isLittleEndian() const {
   case Triple::x86_64:
   case Triple::xcore:
   case Triple::xtensa:
+  case Triple::cpu0:    // CPU0 is little endia
     return true;
   default:
     return false;
